  		// imm7     rs2     rs1     fun3  imm5
001120a3               0000000 0  0001   0001  0 010  0000 1010 0011=001120a3
00112123               0000000 0  0001   0001  0 010  0001 0010 0011=001120a3
001121a3               0000000 0  0001   0001  0 010  0001 1010 0011=001120a3
00112223               0000000 0  0001   0001  0 010  0010 0010 0011=001120a3
001122a3               0000000 0  0001   0001  0 010  0010 1010 0011=001120a3

ram（rs1 + 1） = rs2
rs1 = 00100
rs2 = 00001
rs2不变 地址变

                              // imm12           rs1     fun3   rd
00112303               000000000001 00010   010  00110 000 0011
00212303 
00312303 
00412303 
00512303 

rd = ram（rs1 + 1）
imm变 地址变 rs1不变 rd 不变
00112303 
00212303 
00312303 
00412303 
00512303 

rtype rd, rs1,rs2
数据冒险测试用例
addi x1,  x0, imm
add x19, x0, x1
sub  x2, x19, x1
let imm = 12'b001
code:

imm                  rs1   fun3 rd op 
000000000001 00000 000 00001 0010011
imm   rs1   fun3 rd op 
ff1   00001 000   093
fun7           rs2         rs1      fun3      rd          op 
0000000  00001   0000      0       000   1001  1   011  0011
fun7           rs2         rs1      fun3   rd          op 
0100000   00001  10011   000   00010 0110011

final:
00100093
001009b3
40198133

数据冒险测试用例2
addi x1,  x0, imm
addi x2,  x0, imm
addi x3,  x0, imm
addi x5,  x0, imm
addi x6,  x0, imm
sub x2,x1,x3
and x12,x2,x5
or x13,x6,x2
add x14,x2,x2
sd x14,100(x2)
or x13,x6,x2
add x14,x2,x2


imm                  rs1   fun3    rd    op 
111111110001 00000 000 00001 0010011
imm                  rs1   fun3    rd    op 
111111110001 00000 000 00010 0010011
imm                  rs1   fun3    rd    op 
111111110001 00000 000 00011 0010011
imm                  rs1   fun3    rd    op 
111111110001 00000 000 00101 0010011
imm                  rs1   fun3    rd    op 
111111110001 00000 000 00110 0010011
fun7           rs2         rs1      fun3   rd          op 
0100000  00011    00001   000   00010 0110011
fun7           rs2         rs1      fun3   rd          op 
0000000  00101   00010    111  01100  0110011
fun7           rs2         rs1      fun3   rd          op 
0000000  00010    00110   110  01101  0110011
fun7           rs2         rs1      fun3   rd          op 
0000000  00010    0001  0     000   0111  0  0110011
imm7         rs2         rs1      fun3   imm5         op 
0000011  01110    00010   010   00100     0100011

100 = 64 + 32 + 4

ff100093
ff100113
ff100193
ff100293
ff100313
40308133
00517633
002366b3
00210733
06e12223
002366b3
00210733
pass



控制冒险测试用例
静态预测
addi x1,  x0, ff1
addi x2,  x0, ff2
beq x1,x2, 200
addi x3,  x3, ff3
正确结果：不跳转 
200D =0 0000 1100 1000B
0 + 000110      0100+0
重排= 0000110 01000
long     000..001010100
shifted  10100010

imm                  rs1   fun3    rd    op 
111111110001 00001 000 00001 0010011
imm                  rs1   fun3    rd    op 
111111110010 00010 000 00010 0010011
imm                  rs1   fun3    rd    op 
000000000000 00000 000 00000 0010011
imm7	 rs2      rs1       fun3    imm5      op 
0000110  00010  00001      000   01000  1100011
imm                  rs1   fun3    rd    op 
111111110011 00011 000  00011 0010011

ff100093
ff200113
0c208463
ff318193
passed

addi x1,  x0, ff1
addi x2,  x0, ff2
bne x1,x2, 200
addi x3,  x0, ff3
正确结果：跳转 

imm                  rs1   fun3    rd    op 
111111110001 00001 000 00001 0010011
imm                  rs1   fun3    rd    op 
111111110010 00010 000 00010 0010011
imm7	 rs2      rs1       fun3    imm5      op 
0000110  00010  00001     001   01000  1100011
imm                  rs1   fun3    rd    op 
111111110011 00000 001 00011 0010011

ff100093
ff200113
0c209463
ff301193
passed


addi x1,  x0, ff1
addi x2,  x0, ff2
blt  x1,x2, 200
addi x1,  x0, ff1
addi x2,  x0, ff2
addi x1,  x0, ff1
addi x2,  x0, ff2

imm                  rs1   fun3    rd    op 
111111110001 00000 000 00001 0010011
imm                  rs1   fun3    rd    op 
111111110010 00000 000 00010 0010011
imm7	 rs2      rs1       fun3    imm5      op 
0000110  00010  00001     100   01000  1100011
imm                  rs1   fun3    rd    op 
111111110011 00011 001 00011 0010011

ff100093
ff200113
0c20c463
ff100093
ff200113
ff100093
ff200113
应该跳转
passed

addi x1,  x0, ff1
addi x2,  x0, ff2
bge  x1,x2, 200
addi x1,  x0, ff1
addi x2,  x0, ff2
addi x1,  x0, ff1
addi x2,  x0, ff2

imm                  rs1   fun3    rd    op 
111111110001 00001 000 00001 0010011
imm                  rs1   fun3    rd    op 
111111110010 00010 000 00010 0010011
imm7	 rs2      rs1       fun3    imm5      op 
0000110  00010  00001     101   01000  1100011
imm                  rs1   fun3    rd    op 
111111110011 00011 001 00011 0010011

ff100093
ff200113
0c20d463
ff100093
ff200113
ff100093
ff200113
应该不跳转
passed

addi x1,  x0, ff1
addi x2,  x0, ff2
bltu x1,x2, 200
addi x3,  x3, ff3

imm                  rs1   fun3    rd    op 
111111110001 00001 000 00001 0010011
imm                  rs1   fun3    rd    op 
111111110010 00010 000 00010 0010011
imm7	 rs2      rs1       fun3    imm5      op 
0000110  00010  00001     110   01000  1100011
imm                  rs1   fun3    rd    op 
111111110011 00011 001 00011 0010011

ff100093
ff200113
0c20e463
ff318193
应该跳转
passed

addi x1,  x0, ff1
addi x2,  x0, ff2
bgeu x1,x2, 100
addi x3,  x3, ff3

imm                  rs1   fun3    rd    op 
111111110001 00001 000 00001 0010011
imm                  rs1   fun3    rd    op 
111111110010 00010 000 00010 0010011
imm7	 rs2      rs1       fun3    imm5      op 
0000110  00010  00001     111    01000  1100011
imm                  rs1   fun3    rd    op 
111111110011 00011 001 00011 0010011

ff100093
ff200113
0c20f463
ff318193
应该不跳转
passed

addi x1,  x1, ff1
addi x2,  x2, ff2
如果有奇数地址会忽略奇数
jal    x4, 200
addi x3,  x3, ff3

100D = 0 00000000 0 00011 00100B
200D = 0000 0000 0000 0000 1100 1000B
重排 = 00001100100000000000

imm                  rs1   fun3    rd    op 
111111110001 00001 000 00001 0010011
imm                  rs1   fun3    rd    op 
111111110010 00010 000 00010 0010011
imm20	 	              rd           op	
00001100100000000000   00100   1101111
imm                  rs1   fun3    rd    op 
111111110011 00011 001 00011 0010011

ff108093
ff210113
0c80026f
ff318193

addi x1,  x1, 001
addi x2,  x2, 002
nop
jalr   x4,  x1, 100
addi x3,  x3, 003

100D = 0 00000000 0 00011 00100B
重排 = 00001100100000000000

imm                        rs1     fun3        rd        op 
000000000001   00001   000      00001  0010011
imm                        rs1     fun3        rd        op 
000000000010   00010   000      00010  0010011
imm12	              rs1    fun3    rd          op	
000001100100   00001  000    00100  1100111  
imm                        rs1     fun3        rd        op 
000000000011   00011   000      00011  0010011

00108093
00210113
00000013
06408267
00318193

addi x1,  x1, 001
addi x1,  x1, 001
addi x1,  x1, 001
addi x1,  x1, 001

00108093
00108093
00108093
00108093
pass

addi x1,  x0, ff1
addi x2,  x0, ff2
blt  x1,x2, 004
addi x1,  x0, ff1
addi x2,  x0, ff2
addi x1,  x0, ff1
addi x2,  x0, ff2

imm                  rs1   fun3    rd    op 
111111110001 00000 000 00001 0010011
imm                  rs1   fun3    rd    op 
111111110010 00000 000 00010 0010011
imm7	 rs2      rs1       fun3    imm5      op 
0000000  00010  00001     100   00100  1100011
imm                  rs1   fun3    rd    op 
111111110011 00011 001 00011 0010011

ff100093
ff200113
0020c263
ff100093
ff200113
ff100093
ff200113
应该跳转

stall 测试 
真值表 

0 lui  x2,  0001000
4 lui  x1,  0001000
8 addi x1,  x1, 002   //0001002
c addi x2,  x2, 001   //0001001
10 sd  x1, 01(x2)        //ram(0001002) = 0001002
14 ld   x2, 01(x2)        //x2 = ram(0001002)
18 or  x3, x2, x1        //or(0001001 0001002)
1c addi x1,  x0, ff1
20 addi x2,  x0, ff2
24 addi x1,  x0, ff1
28 addi x2,  x0, ff2


11111111111111111111          00010  0110111
 imm20          		rd        op
11111111111111111111          00001  0110111
imm12 		rs1       fun3       rd            op 
000000000010   	00001     000     00001     0010011
imm12 		rs1       fun3       rd            op 
000000000001   	00010     000     00010     0010011

 imm7              rs2        rs1    fun3      imm5   op
0000000         00001   0001 0 01 0     0000 1  0100011
 imm12          	  rs1      fun3     rd        op
000000000001          00010    010    00010    0000011
 fun7 	        rs2        rs1    fun3    rd        op
0000000         00001   00010   110  00011  0110011

00001137
000010b7
00208093
00110113
001120a3
00112103
001161b3
ff100093
ff200113
ff100093
ff200113



ins   auipc	 alusrc	 jal     branch 	 addin1	 addin2	   aluin1	  aluin2     branchaddr        rd
jal      1	    1	  1          1                    pc             4               pc         imm         alu                 add
jalr     0          1          1        	1	   pc              4	      rs1        imm         alu                  add
bne    0          0          0        	1	   pc            imm           rs1          rs2          add                 unused
auipc  1           1          0     	0	  unused      unused      pc          imm       unused              alu
add    0           1          0      	0	  unused     unused 	     rs1         rs2          unused             alu


原则 为了减少前递单元的设计难度，与pc有关的相加最好一律给单独加法器。
然而，jal指令需要用到两遍pc 所以无法实现这种优化。
另一种做法，观察真值表，凡是需要写入rd的计算都由alu来完成
此时目标真值表如下

ins   auipc	 alusrc	 jalr     branch 	 addin1	 addin2	   aluin1	  aluin2     branchaddr        rd
jal      1	    1	  0          1                    pc             imm           pc            4           add                 alu
jalr     1          1          1      	1	   rs1            imm	    pc             4             add 	         alu
bne    0          0          0        	1	   pc            imm           rs1          rs2          add                 unused
auipc  1           1          0     	0	  unused      unused      pc          imm       unused              alu
add    0           0          0      	0	  unused     unused 	     rs1         rs2          unused             alu
addi    0          1           0	0    	unused     unused 	     rs1         rs2          unused               alu
lui       0          1           1	0   	unused     unused 	     rs1         rs2          unused               alu

目标，能不能把jal信号省掉？
已知 alusrc  不能省略
已知 auipc  不能省略 分别控制了alu的两个输入
已知 branch不能省略
所以jal不能省略，但是也不用增加新的信号
如果 auipc = 1 且banch = 0 说明指令必为jal jalr之一 再用jalr就可以区分jal jalr
